#include "Atmosphere.h"

#include <cmath>

const double Atmosphere_MILSTD210::STANDARD[LOWER_TABLE_SIZE] = { 288.1666667, 286.1666667, 284.1666667, 282.2222222, 280.2222222, 278.2222222, 276.2777778, 274.2777778, 272.3333333, 270.3333333, 268.3333333, 266.3888889, 264.3888889, 262.3888889, 260.4444444, 258.4444444, 256.5, 254.5, 252.5, 250.5555556, 248.5555556, 246.6111111, 244.6111111, 242.6111111, 240.6666667, 238.6666667, 236.7222222, 234.7222222, 232.7777778, 230.7777778, 228.7777778, 226.8333333, 224.8333333, 222.8888889, 220.8888889, 218.9444444, 216.9444444, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6666667, 216.6944444, 216.7222222, 217.0277778, 217.3333333, 217.6111111, 217.8888889, 218.1944444, 218.5, 218.8055556, 219.1111111, 219.4166667, 219.7222222, 220.0277778, 220.3333333, 220.6388889, 220.9444444, 221.25, 221.5555556, 221.8611111, 222.1666667, 222.4722222, 222.7777778, 223.0555556, 223.3333333, 223.6388889, 223.9444444, 224.25, 224.5555556, 224.8611111, 225.1666667, 225.4722222, 225.7777778, 226.0833333, 226.3888889, 226.6944444, 227 };
const double Atmosphere_MILSTD210::HOT[LOWER_TABLE_SIZE] = { 312.6111111, 310.5, 308.3888889, 306.2222222, 304.0555556, 301.8888889, 299.7222222, 297.5, 295.2777778, 293.0555556, 290.8888889, 288.8333333, 286.7222222, 284.6111111, 282.5, 280.3333333, 278.1666667, 276, 273.7777778, 271.6111111, 269.5555556, 267.5, 265.3888889, 263.3333333, 261.2222222, 259.1111111, 257, 254.8333333, 252.6666667, 250.5555556, 248.5555556, 246.5555556, 244.5555556, 242.5, 240.5, 238.6666667, 236.8333333, 235, 233.1111111, 231.2222222, 230.5, 230.7777778, 231, 231.2222222, 231.4444444, 231.7222222, 232, 232.2222222, 232.5, 232.7777778, 233.0555556, 233.2222222, 233.3333333, 233.4444444, 233.5555556, 233.6666667, 233.7222222, 233.8333333, 233.9444444, 234.0555556, 234.1666667, 234.2777778, 234.3888889, 234.5, 234.6111111, 234.6944444, 234.7777778, 235.0555556, 235.3333333, 235.7222222, 236.1111111, 236.5, 236.8888889, 237.2777778, 237.6666667, 238.0555556, 238.4444444, 238.8333333, 239.2222222, 239.6111111, 240, 240.4444444, 240.8888889, 241.3055556, 241.7222222, 242.1666667, 242.6111111, 243.0833333, 243.5555556, 243.9722222, 244.3888889, 244.8055556, 245.2222222, 245.6388889, 246.0555556, 246.5277778, 247, 247.4722222, 247.9444444, 248.4444444, 248.9444444 };
const double Atmosphere_MILSTD210::COLD[LOWER_TABLE_SIZE] = { 222.0555556, 229.5555556, 237.0555556, 244.6666667, 247.0555556, 247.0555556, 247.0555556, 247.0555556, 247.0555556, 247.0555556, 247.0555556, 246.6111111, 244.7777778, 242.9444444, 241.1111111, 239.2222222, 237.3888889, 235.5, 233.6111111, 231.6666667, 229.7777778, 227.8333333, 225.8333333, 223.8888889, 221.8888889, 219.8888889, 217.8888889, 215.8888889, 213.8333333, 211.7222222, 209.6666667, 208.1666667, 208.1666667, 208.1666667, 208.1666667, 208.1666667, 208.1666667, 208.1666667, 208.1666667, 208.1666667, 208.1666667, 208.1666667, 208.1666667, 206.3888889, 203.5555556, 200.6111111, 197.6666667, 194.6666667, 191.6666667, 189.1666667, 187.1111111, 185.9444444, 185.9444444, 185.9444444, 185.9444444, 185.9444444, 185.9444444, 185.9444444, 185.9444444, 185.9444444, 185.9444444, 186.75, 187.5555556, 189.25, 190.9444444, 192.5, 194.0555556, 195.4722222, 196.8888889, 198.2222222, 199.5555556, 200.7777778, 202, 202.5, 203, 202.8611111, 202.7222222, 202.5833333, 202.4444444, 202.2777778, 202.1111111, 201.9166667, 201.7222222, 201.5, 201.2777778, 201.0555556, 200.8333333, 200.6388889, 200.4444444, 200.2222222, 200, 199.7777778, 199.5555556, 199.3333333, 199.1111111, 198.8888889, 198.6666667, 198.4166667, 198.1666667, 197.9166667, 197.6666667 };
const double Atmosphere_MILSTD210::POLAR[LOWER_TABLE_SIZE] = { 246.6666667, 248.3333333, 250.0555556, 251.7222222, 251.9444444, 251.6666667, 251.3333333, 251.0555556, 250.7222222, 250.4444444, 250, 248.4444444, 246.8333333, 245.2777778, 243.7222222, 242.1666667, 240.5555556, 239, 237.4444444, 235.8333333, 234.2777778, 232.6666667, 231.1111111, 229.5, 227.9444444, 226.3333333, 224.7222222, 223.1666667, 221.5555556, 219.9444444, 218.3333333, 218.0555556, 217.8888889, 217.7777778, 217.6111111, 217.4444444, 217.3333333, 217.1666667, 217.0555556, 216.8888889, 216.7222222, 216.6111111, 216.4444444, 216.3333333, 216.1666667, 216, 215.8888889, 215.7222222, 215.6111111, 215.4444444, 215.2777778, 215.1666667, 215, 214.8888889, 214.7222222, 214.5555556, 214.4444444, 214.2777778, 214.1666667, 214.0277778, 213.8888889, 213.7222222, 213.5555556, 213.4166667, 213.2777778, 213.1388889, 213, 212.8611111, 212.7222222, 212.5833333, 212.4444444, 212.3055556, 212.1666667, 212.0277778, 211.8888889, 211.75, 211.6111111, 211.4444444, 211.2777778, 211.1388889, 211, 210.8611111, 210.7222222, 210.5833333, 210.4444444, 210.3055556, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667, 210.1666667 };
const double Atmosphere_MILSTD210::TROPICAL[LOWER_TABLE_SIZE] = { 305.2777778, 303.1111111, 300.9444444, 298.7777778, 296.6666667, 294.5, 292.3333333, 290.1666667, 288, 285.8888889, 283.7222222, 281.5555556, 279.3888889, 277.2777778, 275.1111111, 272.9444444, 270.8333333, 268.6666667, 266.5, 264.3333333, 262.2222222, 260.0555556, 257.8888889, 255.7777778, 253.6111111, 251.5, 249.3333333, 247.1666667, 245.3888889, 242.8888889, 240.7777778, 238.6111111, 236.4444444, 234.3333333, 232.1666667, 230.0555556, 227.8888889, 225.7777778, 223.6666667, 221.5555556, 219.5, 217.4444444, 215.3888889, 213.3888889, 211.3888889, 209.3888889, 207.4444444, 205.5, 203.6111111, 201.6666667, 199.7777778, 197.9444444, 196.0555556, 194.2222222, 193.6666667, 194.8333333, 196.0555556, 197.2777778, 198.4444444, 199.6944444, 200.9444444, 202.1666667, 203.3888889, 204.6666667, 205.9444444, 207.2222222, 208.5, 209.7777778, 211.0555556, 212.25, 213.4444444, 214.1666667, 214.8888889, 215.6111111, 216.3333333, 217.0833333, 217.8333333, 218.5555556, 219.2777778, 220.0277778, 220.7777778, 221.5277778, 222.2777778, 223.0277778, 223.7777778, 224.5277778, 225.2777778, 226.0277778, 226.7777778, 227.5277778, 228.2777778, 229.0277778, 229.7777778, 230.5277778, 231.2777778, 232, 232.7222222, 233.4722222, 234.2222222, 234.9722222, 235.7222222 };


const double Atmosphere_MILSTD210::STANDARD_HUMIDITY[LOWER_TABLE_SIZE] = { 0.5, 0.45, 0.4, 0.3, 0.27, 0.24, 0.2, 0.18, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.08, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05};
const double Atmosphere_MILSTD210::HOT_HUMIDITY[LOWER_TABLE_SIZE] = { 0.5, 0.45, 0.4, 0.3, 0.27, 0.24, 0.2, 0.18, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.08, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05 };
const double Atmosphere_MILSTD210::COLD_HUMIDITY[LOWER_TABLE_SIZE] = { 0.5, 0.45, 0.4, 0.3, 0.27, 0.24, 0.2, 0.18, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.08, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05 };
const double Atmosphere_MILSTD210::POLAR_HUMIDITY[LOWER_TABLE_SIZE] = { 0.5, 0.45, 0.4, 0.3, 0.27, 0.24, 0.2, 0.18, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.08, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05 };
const double Atmosphere_MILSTD210::TROPICAL_HUMIDITY[LOWER_TABLE_SIZE] = { 0.5, 0.45, 0.4, 0.3, 0.27, 0.24, 0.2, 0.18, 0.16, 0.15, 0.14, 0.13, 0.12, 0.11, 0.1, 0.09, 0.08, 0.08, 0.08, 0.08, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05 };

void Atmosphere_MILSTD210::set(const DAY_TYPE type, 
    const double temp_offset, 
    const double humidity_offset,
    const double p0,
    const double g0)
{
    constexpr double ISOTHERMAL_THRESHOLD = 1e-3;

    const double* temps = Atmosphere_MILSTD210::STANDARD;
    const double* humidity = Atmosphere_MILSTD210::STANDARD_HUMIDITY;

    switch (type)
    {
    case DAY_TYPE::STANDARD:
        temps = Atmosphere_MILSTD210::STANDARD;
        humidity = Atmosphere_MILSTD210::STANDARD_HUMIDITY;
        break;
    case DAY_TYPE::HOT:
        temps = Atmosphere_MILSTD210::HOT;
        humidity = Atmosphere_MILSTD210::HOT_HUMIDITY;
        break;
    case DAY_TYPE::COLD:
        temps = Atmosphere_MILSTD210::COLD;
        humidity = Atmosphere_MILSTD210::COLD_HUMIDITY;
        break;
    case DAY_TYPE::POLAR:
        temps = Atmosphere_MILSTD210::POLAR;
        humidity = Atmosphere_MILSTD210::POLAR_HUMIDITY;
        break;
    case DAY_TYPE::TROPICAL:
        temps = Atmosphere_MILSTD210::TROPICAL;
        humidity = Atmosphere_MILSTD210::TROPICAL_HUMIDITY;
        break;
    }

    std::vector<double> values(LOWER_TABLE_SIZE * 8);

    double P = p0;
    double* data = values.data();
    for (auto i = 0; i < LOWER_TABLE_SIZE; i++)
    {
        data[0] = P;
        data[3] = temps[i] + temp_offset;

        double P_H20 = Air::partial_pressure_H20(data[3])*(humidity[i] + humidity_offset);
        data[5] = (1.4 * (P - P_H20) + 1.33 * P_H20) / P; // gamma
        data[6] = (Air::DRY_AIR_MOLAR_MASS * (P - P_H20) + Air::WATER_MOLAR_MASS * P_H20) / P; // mw

        data[7] = Air::R_GAS / data[6]; // R gas        
        
        data[1] = 1.0 / sqrt(data[5] * data[7] * data[3]);
        data[2] = Air::dynamic_viscosity_sutherland(data[3]); // Pa s
        data[4] = P / (data[7] * data[3]);
                
        double dt = temps[i] - temps[i-1];
        double pressure_ratio;
        if (fabs(dt) < ISOTHERMAL_THRESHOLD)
        {
            pressure_ratio = Atmosphere::isothermalPressureRatio(LOWER_HEIGHT_INCREMENT, data[3], data[7], g0);
        }
        else
        {
            double lapseRate = dt / LOWER_HEIGHT_INCREMENT;
            pressure_ratio = Atmosphere::gradientPressureRatio(lapseRate, data[3], data[3] + dt, data[7], g0);
        }
        P *= pressure_ratio;
        data += 8;
    }

    std::vector<double> upper_values(UPPER_TABLE_SIZE * 8);
    data = upper_values.data();
    for (auto i = 0; i < UPPER_TABLE_SIZE; i++)
    {
        data[0] = P;
        data[3] = temps[i] + offset;

        double P_H20 = Air::partial_pressure_H20(data[3]);
        data[5] = (1.4 * (P - P_H20) + 1.33 * P_H20) / P; // gamma
        data[6] = (Air::DRY_AIR_MOLAR_MASS * (P - P_H20) + Air::WATER_MOLAR_MASS * P_H20) / P; // mw

        data[7] = Air::R_GAS / data[6]; // R gas        

        data[1] = 1.0 / sqrt(data[5] * data[7] * data[3]);
        data[2] = Air::dynamic_viscosity_sutherland(data[3]); // Pa s
        data[4] = P / (data[7] * data[3]);

        double dt = temps[i] - temps[i - 1];
        double pressure_ratio;
        if (fabs(dt) < ISOTHERMAL_THRESHOLD)
        {
            pressure_ratio = Atmosphere::isothermalPressureRatio(LOWER_HEIGHT_INCREMENT, data[3], data[7], g0);
        }
        else
        {
            double lapseRate = dt / LOWER_HEIGHT_INCREMENT;
            pressure_ratio = Atmosphere::gradientPressureRatio(lapseRate, data[3], data[3] + dt, data[7], g0);
        }
        P *= pressure_ratio;
        data += 8;
    }
}